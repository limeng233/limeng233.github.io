<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kense</title>
  
  
  <link href="http://kense.com/atom.xml" rel="self"/>
  
  <link href="http://kense.com/"/>
  <updated>2021-01-08T03:11:10.486Z</updated>
  <id>http://kense.com/</id>
  
  <author>
    <name>Kense</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 搭建博客</title>
    <link href="http://kense.com/2021/01/07/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://kense.com/2021/01/07/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-01-07T06:11:27.000Z</published>
    <updated>2021-01-08T03:11:10.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h3 id="进入博客项目目录"><a href="#进入博客项目目录" class="headerlink" title="进入博客项目目录"></a>进入博客项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="安装-Butterfly-主题"><a href="#安装-Butterfly-主题" class="headerlink" title="安装 Butterfly 主题"></a>安装 Butterfly 主题</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改站点配置文件 <code>_config.yaml</code>，把主题改为 <code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安裝-Pug-插件"><a href="#安裝-Pug-插件" class="headerlink" title="安裝 Pug 插件"></a>安裝 Pug 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-pug --save</span><br></pre></td></tr></table></figure><h3 id="安装字数统计插件"><a href="#安装字数统计插件" class="headerlink" title="安装字数统计插件"></a>安装字数统计插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-search --save</span><br></pre></td></tr></table></figure><h3 id="安装-RSS-插件"><a href="#安装-RSS-插件" class="headerlink" title="安装 RSS 插件"></a>安装 RSS 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><code>_config.xml</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  # Generate both atom and rss2 feeds</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br></pre></td></tr></table></figure><h2 id="添加-tag-和-categories"><a href="#添加-tag-和-categories" class="headerlink" title="添加 tag 和 categories"></a>添加 tag 和 categories</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>将 <code>source/tags</code> 文件夹下 <code>index.md</code> 文件里的内容修改为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>categories 同理</p><h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h3><p>仓库名称 <code>&lt;username&gt;.github.io</code></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>编辑 <code>_config.yml</code> 修改以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><h3 id="新建一个网站"><a href="#新建一个网站" class="headerlink" title="新建一个网站"></a>新建一个网站</h3><p>如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;&lt;title&gt;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="启动服务器-1"><a href="#启动服务器-1" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口</span></span><br><span class="line">hexo s -p 80</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs">Hexo 文档</a><br><a href="https://butterfly.js.org/posts/21cfbf15">Butterfly 安装文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h2&gt;&lt;h3 id=&quot;安装-Hexo-命令行工具&quot;&gt;&lt;a href=&quot;#安装-Hexo-命令行工具&quot; class</summary>
      
    
    
    
    <category term="建站" scheme="http://kense.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="http://kense.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>2020 年终总结</title>
    <link href="http://kense.com/2021/01/02/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://kense.com/2021/01/02/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-02T12:00:00.000Z</published>
    <updated>2021-01-08T02:24:25.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020-总结"><a href="#2020-总结" class="headerlink" title="2020 总结"></a>2020 总结</h1><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>2020 年是我从 2018 年毕业参加工作以来能力提升最大的一年。</p><p>这一年我在公司参与了数据平台的开发，并作为核心开发人员。</p><p>开始接触大数据生态，主要研究了 Kudu、Impala、NiFi、Flink。</p><p>coding 能力提升了很多。</p><p>开发环境从 Manjaro 切换到了 macOS。</p><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><p>开始尝试写博客了，刚开始写的东西不太有深度，要慢慢写一些有深度的东西。</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p>开始刷 LeetCode 了，感觉刷一刷 LeetCode 还是很有必要的。<br>目前我的收获是：有了复杂度分析的意识，coding 能力提高了。</p><h2 id="源码研究"><a href="#源码研究" class="headerlink" title="源码研究"></a>源码研究</h2><p>主要研究了一些 NiFi 源码，因工作需要还给他做了个汉化（虽然汉化的程度也不是很高😝）。<br>话说 NiFi 用 NAR 包做类资源隔离和 Processor 扩展的设计真棒啊👍。</p><h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><p>技术类的《算法》，一边刷题一边看。最近买了本《数据密集型应用系统设计》，刚要开始看。<br>小说类《追风筝的人》，每天在地铁上看一会，中午吃完饭有时会看一会，目前还没有看完，慢慢看，看书的时候心情很好。</p><p>我看书很慢，比较细🤣</p><h1 id="2021-flag"><a href="#2021-flag" class="headerlink" title="2021 flag"></a>2021 flag</h1><ol><li>写 10 篇 blog（要有深度）</li><li>读 3 本技术书</li><li>重学 CS 基础知识（数据结构、算法、设计模式、操作系统、网络）</li><li>深入学习大数据和分布式相关技术</li><li>学习 Python、数据统计/分析、机器学习</li><li>准备 22 考研（学习数学、英语）</li><li>多多参加社交活动（最近真是越来越宅了🤣），可以参加一些 Meetup，逛逛漫展，听听演唱会，在技术社区也要交流起来</li></ol><blockquote><p>本文参与了 <a href="https://segmentfault.com/a/1190000038755701">SegmentFault 思否征文「2020 总结」</a>，欢迎正在阅读的你也加入。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2020-总结&quot;&gt;&lt;a href=&quot;#2020-总结&quot; class=&quot;headerlink&quot; title=&quot;2020 总结&quot;&gt;&lt;/a&gt;2020 总结&lt;/h1&gt;&lt;h2 id=&quot;Work&quot;&gt;&lt;a href=&quot;#Work&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="年终总结" scheme="http://kense.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="http://kense.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JNI 使用教程</title>
    <link href="http://kense.com/2020/11/29/JNI%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://kense.com/2020/11/29/JNI%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-29T12:00:00.000Z</published>
    <updated>2021-01-08T02:24:25.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNI-使用教程"><a href="#JNI-使用教程" class="headerlink" title="JNI 使用教程"></a>JNI 使用教程</h1><ol><li><p>编写 Java 测试类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJNI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 native 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载动态库</span></span><br><span class="line">        <span class="comment">// 从当前路径或 java.library.path 查找, 去掉文件扩展名, macos 需要去掉 lib 前缀</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;TestJNI&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或者使用文件绝对路径加载</span></span><br><span class="line">        <span class="comment">// System.load( &quot;/path/to/TestJNI.so&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestJNI().say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用 Java 类生成 C++ 头文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah TestJNI</span><br></pre></td></tr></table></figure><p> 修改 <code>TestJNI.h</code> 中 <code>#include &lt;jni.h&gt;</code> -&gt; <code>#include &quot;jni.h&quot;</code><br> 这样会优先从当前目录寻找 <code>jni.h</code> 头文件</p></li><li><p>编写 <code>TestJNI.cpp</code> 文件</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TestJNI.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_TestJNI_say</span> <span class="params">(JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译 C++ 代码, 生成动态链接库</p><ol><li>拷贝依赖的 JNI 相关头文件到当前目录, 或者使用 gcc 编译时指定参数 <code>-I $JAVA_HOME/include -I $JAVA_HOME/include/darwin</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="variable">$JAVA_HOME</span>/include/jni.h .</span><br><span class="line">cp <span class="variable">$JAVA_HOME</span>/include/darwin/jni_md.h .</span><br></pre></td></tr></table></figure></li><li>编译<ul><li>Linux<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared TestJNI.cpp -o TestJNI.so</span><br></pre></td></tr></table></figure></li><li>MacOS<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -dynamiclib TestJNI.cpp -o libTestJNI.dylib -I <span class="variable">$JAVA_HOME</span>/include -I <span class="variable">$JAVA_HOME</span>/include/darwin</span><br></pre></td></tr></table></figure></li><li>Windows<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared TestJNI.cpp -o TestJNI.dll -I <span class="variable">$JAVA_HOME</span>/include -I <span class="variable">$JAVA_HOME</span>/include/darwin</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>编译运行 Java Class</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac TestJNI.java</span><br><span class="line">java TestJNI</span><br></pre></td></tr></table></figure></li></ol><ul><li>附: 如何查看 <code>java.library.path</code> 地址<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintJavaLibPath</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] split = System.getProperty(<span class="string">&quot;java.library.path&quot;</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : split) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a href="https://github.com/kense-lab/TestJNI">https://github.com/kense-lab/TestJNI</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/huangzhilin2015/article/details/101158137">Java深入JVM源码核心探秘Unsafe(含JNI完整使用流程)</a></li><li><a href="https://www.coder.work/article/1417794">Java - 如何使用dylib文件？</a></li><li><a href="https://blog.csdn.net/daylight_1/article/details/70199452">Java加载dll或so库文件的路径 java.library.path</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JNI-使用教程&quot;&gt;&lt;a href=&quot;#JNI-使用教程&quot; class=&quot;headerlink&quot; title=&quot;JNI 使用教程&quot;&gt;&lt;/a&gt;JNI 使用教程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写 Java 测试类&lt;/p&gt;
 &lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="Java" scheme="http://kense.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://kense.com/tags/Java/"/>
    
    <category term="JNI" scheme="http://kense.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>记录一次 Rancher Server 的 Docker 镜像丢失和证书过期问题</title>
    <link href="http://kense.com/2020/11/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Rancher-Server%E7%9A%84Docker%E9%95%9C%E5%83%8F%E4%B8%A2%E5%A4%B1%E5%92%8C%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://kense.com/2020/11/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Rancher-Server%E7%9A%84Docker%E9%95%9C%E5%83%8F%E4%B8%A2%E5%A4%B1%E5%92%8C%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-28T12:00:00.000Z</published>
    <updated>2021-01-08T02:24:25.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Docker 版本:<br>18.06.3-ce</p><p>Rancher 版本:<br>2.3.2</p><p>现象:</p><ol><li>Rancher UI 无法访问, 下游集群一切正常</li><li><code>docker ps</code> 查看 Rancher Server 容器丢失</li><li><code>docker images</code> 查看 Rancher Server 镜像丢失</li></ol><h1 id="寻找-Rancher-Server-容器"><a href="#寻找-Rancher-Server-容器" class="headerlink" title="寻找 Rancher Server 容器"></a>寻找 Rancher Server 容器</h1><ol><li>重新拉取 Rancher Server 镜像 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/rancher:v2.3.2</span><br></pre></td></tr></table></figure></li><li>执行 <code>docker ps -a | grep &#39;rancher\/rancher:v2.3.2&#39;</code> 发现丢失的 Rancher Server 容器回来了</li></ol><ul><li>得出结论:<br>  Rancher Server 容器丢失的原因是: 依赖的镜像丢失了, 容器也就无法显示了, 并没有真正丢失<br>  Rancher Server 镜像丢失原因不明, 可能是非正常关机或文件系统损坏等原因导致的</li></ul><h1 id="发现新问题"><a href="#发现新问题" class="headerlink" title="发现新问题"></a>发现新问题</h1><p>重新启动 Rancher Server 容器, 但启动失败<br>容器日志中发现 <code>x509: certificate has expired or is not yet valid</code></p><p>问题是 K3s 的 Bug 导致的 <strong>Rancher Server 证书过期</strong></p><h1 id="解决-Rancher-Server-证书过期问题"><a href="#解决-Rancher-Server-证书过期问题" class="headerlink" title="解决 Rancher Server 证书过期问题"></a>解决 Rancher Server 证书过期问题</h1><ol><li>备份 Rancher Server 数据 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &lt;old_rancher_container_id&gt;:/var/lib/rancher /home/data/rancher.old</span><br></pre></td></tr></table></figure></li><li>查看证书有效期 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /home/data/rancher/k3s/server/tls/client-admin.crt -noout -dates</span><br></pre></td></tr></table></figure></li><li>修改系统时间到证书过期之前, 例如 5 天前 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oldDate=`date <span class="string">&#x27;+%Y%m%d %H:%M:%S&#x27;</span> --date=<span class="string">&#x27;-5 day&#x27;</span>`</span><br><span class="line">date -s <span class="string">&quot;<span class="variable">$&#123;oldDate&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>启动 Rancher Server 容器, 发现 Rancher UI 可以正常访问了 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start &lt;old_rancher_container_id&gt;</span><br></pre></td></tr></table></figure></li><li>停止旧容器, 运行新容器, 并挂载旧数据 (这次将数据挂载到宿主机, 防止再次丢失) <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止旧容器</span></span><br><span class="line">docker stop &lt;old_rancher_container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧的证书文件, 容器启动时会生成新的证书文件</span></span><br><span class="line">cp /home/data/rancher.old  /home/data/rancher</span><br><span class="line">rm -rf /home/data/rancher/k3s/server/tls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动新容器</span></span><br><span class="line">docker run -d --restart=unless-stopped --name rancher-new -p 80:80 -p 443:443 -v /home/data/rancher:/var/lib/rancher rancher-k8s/rancher/rancher:v2.3.2</span><br></pre></td></tr></table></figure> 新容器启动后如果出现以下日志，需要再重启一次 Rancher Server <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Waiting for server to become available: Get https:&#x2F;&#x2F;localhost:6443&#x2F;version?timeout&#x3D;30s: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure></li><li>将时间改回来 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currDate=`date <span class="string">&#x27;+%Y%m%d %H:%M:%S&#x27;</span> --date=<span class="string">&#x27;+5 day&#x27;</span>`</span><br><span class="line">date -s <span class="string">&quot;<span class="variable">$&#123;currDate&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>删除旧的 Rancher Server 容器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;old_rancher_container_id&gt;</span><br></pre></td></tr></table></figure></li><li>确认 Rancher 和下游集群是否正常</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIyMTUwMDMyOQ==&mid=2247494845&idx=1&sn=c6a56a473eaa64cee788ef92fce9c6cc&chksm=e8396a7bdf4ee36d4387fa4ee636cb8e128beca169c78111887a2e514320436c62f20ee4670b&scene=21#wechat_redirect">超稳攻略！Rancher 2.3手动轮换证书，保护集群安全！</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Docker 版本:&lt;br&gt;18.06.3-ce&lt;/p&gt;
&lt;p&gt;Rancher 版本:&lt;br&gt;2.3.2&lt;/p&gt;
&lt;p&gt;现象:&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="容器化" scheme="http://kense.com/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="Rancher" scheme="http://kense.com/tags/Rancher/"/>
    
    <category term="Docker" scheme="http://kense.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>NiFi 1.10.0+ 版本使用 Kafka 0.8.x</title>
    <link href="http://kense.com/2020/11/20/NiFi-1.10.0+%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8-Kafka-0.8.x/"/>
    <id>http://kense.com/2020/11/20/NiFi-1.10.0+%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8-Kafka-0.8.x/</id>
    <published>2020-11-20T12:00:00.000Z</published>
    <updated>2021-01-08T02:35:25.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需要从 Kafka 0.8.x 版本订阅消息, 然后发送消息到 Kafka 1.0.x 版本中, 其中涉及到了 Kafka 版本冲突的问题, NiFi 很好的解决了这个问题</p><p><a href="http://nifi.apache.org/docs/nifi-docs/html/developer-guide.html#nars">NiFi 开发人员指南</a> NiFi Archives (NARs) 章节中有如下说明</p><blockquote><p>When software from many different organizations is all hosted within the same environment, Java ClassLoaders quickly become a concern. If multiple components have a dependency on the same library but each depends on a different version, many problems arise, typically resulting in unexpected behavior or NoClassDefFoundError errors occurring. In order to prevent these issues from becoming problematic, NiFi introduces the notion of a NiFi Archive, or NAR.</p></blockquote><p>以上说明 NiFi 通过将依赖打入 NAR 包, 且不同 NAR 包的 ClassLoader 相互隔离, 然后不同版本的处理器使用不同的 NAR 包, 隔离了依赖, 解决了依赖冲突问题</p><p>但是目前使用的 NiFi 1.11.4 版本中, 没有找到 Kafka 8.0.x 相关处理器, 最低支持 Kafka 0.9.x</p><h1 id="寻找解决方案"><a href="#寻找解决方案" class="headerlink" title="寻找解决方案"></a>寻找解决方案</h1><p><a href="https://www.nifi.rocks/apache-nifi-processors-version-1.10.0">NiFi.rocks</a> 中发现, Nifi 1.10.0 版本中 PutKafka 和 GetKafka 处理器消失了</p><p><a href="https://cwiki.apache.org/confluence/display/NIFI/Release+Notes#ReleaseNotes-Version1.10.0">NiFi 发行说明</a> 中有以下说明</p><blockquote><p>Please note several components that were bundled by default are no longer included due to space limitations.  Please see Migration Guidance specifically for moving to 1.10.x.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/img/NiFi-1.10.0+%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8-Kafka-0.8.x/1.png" alt="image"></p><p>以上说明由于空间限制，有几个默认捆绑的组件在 NiFi 1.10.x 版本的软件包不再默认捆绑, 从 <a href="https://cwiki.apache.org/confluence/display/NIFI/Migration+Guidance">迁移指南</a> 中可以获取到更详细的说明</p><p><a href="https://cwiki.apache.org/confluence/display/NIFI/Migration+Guidance">NiFi 迁移指南</a> 中有以下说明</p><blockquote><p>Migrating from 1.x.x to 1.10.0<br>  We’ve removed the following nars from the default convenience binary.  These include kite-nar, kafka-0-8-nar, flume-nar, media-nar, druid-controller-service-api-nar, druid-nar, other-graph-services-nar.  You can still get them from the various artifact repositories and use them in your flows but we cannot bundle them due to space limitations by default.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/img/NiFi-1.10.0+%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8-Kafka-0.8.x/2.png" alt="image"></p><p>以上说明由于空间限制, kafka-0-8-nar 已经从默认的二进制文件包中删除, 但是可以从 Artifact 仓库获取使用</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>获取 kafka-0-8-nar NAR 包, 放到 NiFi 安装目录下</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>获取 nifi-kafka-0-8-nar-1.11.4.nar, 有两种方案<br> a. 从 <a href="https://mvnrepository.com/artifact/org.apache.nifi/nifi-kafka-0-8-nar">Maven 仓库</a> 下载对应版本的 <code>nifi-kafka-0-8-nar</code> NAR 包<br> b. 从源码编译, 编译 <code>nifi-nar-bundles/nifi-kafka-bundle</code> 模块, 找到 <code>nifi-nar-bundles/nifi-kafka-bundle/nifi-kafka-0-8-nar/target/nifi-kafka-0-8-nar-1.11.4.nar</code></p></li><li><p>将 NAR 包放到 NiFi 安装目录的 <code>lib</code> 目录下, 重启 NiFi, 然后我们得到了 Kafka 0.8.x 相关处理器</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/img/NiFi-1.10.0+%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8-Kafka-0.8.x/3.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;需要从 Kafka 0.8.x 版本订阅消息, 然后发送消息到 Kafka 1.0.x 版本中, 其中涉及到了 Kafka 版本冲突的问题,</summary>
      
    
    
    
    <category term="数据处理" scheme="http://kense.com/categories/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
    <category term="NiFi" scheme="http://kense.com/tags/NiFi/"/>
    
    <category term="ETL" scheme="http://kense.com/tags/ETL/"/>
    
  </entry>
  
</feed>
